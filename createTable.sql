create Table USERS
     (
        USER_ID  VARCHAR2 (100) not null,
        FIRST_NAME  VARCHAR2 (100)  ,
        LAST_NAME  VARCHAR2 (100)  ,
        YEAR_OF_BIRTH  NUMBER(38) ,
        MONTH_OF_BIRTH  NUMBER(38) ,
        DAY_OF_BIRTH  NUMBER(38) ,
        GENDER  VARCHAR2(100) ,
        PRIMARY KEY (USER_ID)
    );

create Table FRIENDS
     (
        USER1_ID  VARCHAR2 (100) REFERENCES USERS(USER_ID),
        USER2_ID  VARCHAR2 (100) REFERENCES USERS(USER_ID),
        PRIMARY KEY (USER1_ID,USER2_ID)
     );    

create Table CITIES
     (
        CITY_ID  INTEGER NOT NULL,
        CITY_NAME  VARCHAR2 (100)  ,
        STATE_NAME  VARCHAR2 (100)  ,
        COUNTRY_NAME  VARCHAR2 (100),
        PRIMARY KEY (CITY_ID)
     );    

create Table    USER_CURRENT_CITY
     (
        USER_ID  VARCHAR2 (100) REFERENCES USERS(USER_ID) NOT NULL,
        CURRENT_CITY_ID  INTEGER REFERENCES CITIES(CITY_ID),
        PRIMARY KEY (USER_ID,CURRENT_CITY_ID)
     );    

create Table USER_HOMETOWN_CITY
     (
        USER_ID  VARCHAR2 (100) REFERENCES USERS(USER_ID) NOT NULL,
        HOMETOWN_CITY_ID  INTEGER REFERENCES CITIES(CITY_ID),
        PRIMARY KEY (USER_ID,HOMETOWN_CITY_ID)
     );    

create Table MESSAGE
     (
        MESSAGE_ID INTEGER NOT NULL,
        SENDER_ID  VARCHAR2 (100) REFERENCES USERS(USER_ID) NOT NULL,
        RECEIVER_ID  VARCHAR2 (100) REFERENCES USERS(USER_ID) NOT NULL,
        MESSAGE_CONTENT  VARCHAR2 (2000),
        SENT_TIME  TIMESTAMP(6), 
        PRIMARY KEY(MESSAGE_ID)
     );    

create Table PROGRAMS
     (
        PROGRAM_ID  INTEGER NOT NULL,
        INSTITUTION  VARCHAR2 (100),
        CONCENTRATION  CHAR(100)  ,
        DEGREE  VARCHAR2 (100) ,
        PRIMARY KEY (PROGRAM_ID)
     );    

create Table EDUCATION
     (
        USER_ID  VARCHAR2 (100) REFERENCES USERS(USER_ID) NOT NULL,
        PROGRAM_ID  INTEGER REFERENCES PROGRAMS(PROGRAM_ID),
        PROGRAM_YEAR  NUMBER(38) ,
        PRIMARY KEY (USER_ID, PROGRAM_ID)
      );   

create Table USER_EVENTS
     (
        EVENT_ID  VARCHAR2 (100) NOT NULL,
        EVENT_CREATOR_ID  VARCHAR2 (100) REFERENCES USERS(USER_ID),
        EVENT_NAME  VARCHAR2 (100) ,
        EVENT_TAGLINE  VARCHAR2 (1000),
        EVENT_DESCRIPTION  VARCHAR2 (4000),
        EVENT_HOST  VARCHAR2 (100),
        EVENT_TYPE  VARCHAR2 (100)  ,
        EVENT_SUBTYPE  VARCHAR2 (100)  ,
        EVENT_LOCATION  VARCHAR2 (200)  ,
        EVENT_CITY_ID  INTEGER,
        EVENT_START_TIME  TIMESTAMP(6) ,
        EVENT_END_TIME  TIMESTAMP(6) ,
        PRIMARY KEY (EVENT_ID)
     );               




CREATE TABLE PARTICIPANTS
(
EVENT_ID VARCHAR2 (100)  REFERENCES USER_EVENTS(EVENT_ID),
USER_ID VARCHAR2 (100)  REFERENCES USERS(USER_ID),
CONFIRMATION CHAR(100),
constraint CONFIRMATION_status check ((CONFIRMATION = 'attending') or (CONFIRMATION = 'declined') 
    or CONFIRMATION = 'unsure' or CONFIRMATION = 'not-replied'),
PRIMARY KEY (EVENT_ID,USER_ID)
);

CREATE TABLE PHOTOS
(PHOTO_ID VARCHAR2 (100) NOT NULL,
ALBUM_ID VARCHAR2 (100), 
PHOTO_CAPTION VARCHAR2 (2000) ,
PHOTO_CREATED_TIME TIMESTAMP(6),
PHOTO_MODIFIED_TIME TIMESTAMP(6),
PHOTO_LINK VARCHAR2 (2000) ,
PRIMARY KEY (PHOTO_ID)
 );

CREATE TABLE ALBUMS
(ALBUM_ID VARCHAR2 (100) NOT NULL,
ALBUM_OWNER_ID VARCHAR2 (100) REFERENCES USERS(USER_ID),
ALBUM_NAME VARCHAR2 (100),
ALBUM_CREATED_TIME TIMESTAMP(6),
ALBUM_MODIFIED_TIME TIMESTAMP(6),
ALBUM_LINK VARCHAR2 (2000) UNIQUE,
ALBUM_VISIBILITY VARCHAR2 (100),
COVER_PHOTO_ID VARCHAR2 (100) NOT NULL, 
constraint Visibility_status check ((ALBUM_VISIBILITY = 'EVERYONE') or (ALBUM_VISIBILITY = 'FRIENDS')
    or ALBUM_VISIBILITY = 'MYSELF' or ALBUM_VISIBILITY = 'FRIENDS_OF_FRIENDS'),
PRIMARY KEY (ALBUM_ID)
);

alter table ALBUMS add constraint ALBUMSRefsPHOTOS foreign key (COVER_PHOTO_ID) references PHOTOS initially deferred deferrable;
alter table PHOTOS add constraint PHOTOSRefsALBUMS foreign key (ALBUM_ID) references ALBUMS initially deferred deferrable;


CREATE TABLE TAGS
(TAG_PHOTO_ID VARCHAR2 (100) REFERENCES PHOTOS(PHOTO_ID) NOT NULL,
TAG_SUBJECT_ID VARCHAR2 (100) REFERENCES USERS(USER_ID) NOT NULL,
TAG_CREATED_TIME TIMESTAMP(6),
TAG_X NUMBER,
TAG_Y NUMBER ,
PRIMARY KEY (TAG_PHOTO_ID,TAG_SUBJECT_ID)
);

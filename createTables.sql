
create Table USERS
     (
        USER_ID  NUMBER ,
        FIRST_NAME  VARCHAR (100)  ,
        LAST_NAME  VARCHAR (100)  ,
        YEAR_OF_BIRTH  INTEGER ,
        MONTH_OF_BIRTH  INTEGER ,
        DAY_OF_BIRTH  INTEGER ,
        GENDER  VARCHAR (100) ,
        PRIMARY KEY (USER_ID)
    );







create Table FRIENDS
     (
        USER1_ID  NUMBER REFERENCES USERS(USER_ID) ,
        USER2_ID  NUMBER REFERENCES USERS(USER_ID),
        PRIMARY KEY (USER1_ID,USER2_ID) 
     );    

create Table CITIES
     (
        CITY_ID  INTEGER ,
        CITY_NAME  VARCHAR (100)  ,
        STATE_NAME  VARCHAR (100)  ,
        COUNTRY_NAME  VARCHAR (100),
        PRIMARY KEY (CITY_ID)
     );    

create Table    USER_CURRENT_CITY
     (
        USER_ID  NUMBER REFERENCES USERS,
        CURRENT_CITY_ID  INTEGER REFERENCES CITIES,
        PRIMARY KEY (USER_ID,CURRENT_CITY_ID)
     );    

create Table USER_HOMETOWN_CITY
     (
        USER_ID  NUMBER REFERENCES USERS(USER_ID),
        HOMETOWN_CITY_ID  INTEGER REFERENCES CITIES(CITY_ID),
        PRIMARY KEY (USER_ID,HOMETOWN_CITY_ID)
     );    

create Table MESSAGE
     (
        SENDER_ID  NUMBER REFERENCES USERS(USER_ID),
        RECEIVER_ID  NUMBER REFERENCES USERS(USER_ID),
        MESSAGE_CONTENT  VARCHAR (2000),
        SENT_TIME  TIMESTAMP, 
        PRIMARY KEY(SENDER_ID,RECEIVER_ID)
     );    

create Table PROGRAMS
     (
        PROGRAM_ID  INTEGER ,
        INSTITUTION  VARCHAR (100)  ,
        CONCENTRATION  VARCHAR (100)  ,
        DEGREE  VARCHAR (100)  ,
        PRIMARY KEY (PROGRAM_ID)
     );    

create Table EDUCATION
     (
        USER_ID  NUMBER REFERENCES USERS(USER_ID),
        PROGRAM_ID  INTEGER REFERENCES PROGRAMS(PROGRAM_ID),
        PROGRAM_YEAR  INTEGER ,
        PRIMARY KEY (USER_ID, PROGRAM_ID)
      );   

create Table USER_EVENTS
     (
        EVENT_ID  NUMBER ,
        EVENT_CREATOR_ID  NUMBER REFERENCES USERS(USER_ID),
        EVENT_NAME  VARCHAR (100),
        EVENT_TAGLINE  VARCHAR (100),
        EVENT_DESCRIPTION  VARCHAR (100),
        EVENT_HOST  VARCHAR (100),
        EVENT_TYPE  VARCHAR (100)  ,
        EVENT_SUBTYPE  VARCHAR (100)  ,
        EVENT_LOCATION  VARCHAR (100)  ,
        EVENT_CITY_ID  INTEGER,
        EVENT_START_TIME  TIMESTAMP ,
        EVENT_END_TIME  TIMESTAMP ,
        PRIMARY KEY (EVENT_ID)
     );               




CREATE TABLE PARTICIPANTS
(
EVENT_ID NUMBER REFERENCES USER_EVENTS(EVENT_ID),
USER_ID NUMBER REFERENCES USERS(USER_ID),
CONFIRMATION VARCHAR(100),
constraint CONFIRMATION_status check ((CONFIRMATION = 'attending') or (CONFIRMATION = 'declined') 
    or CONFIRMATION = 'unsure' or CONFIRMATION = 'not-replied'),
PRIMARY KEY (EVENT_ID,USER_ID)
);



CREATE TABLE ALBUMS
(ALBUM_ID VARCHAR (100) ,
ALBUM_OWNER_ID NUMBER REFERENCES USERS(USER_ID),
ALBUM_NAME VARCHAR (100) ,
ALBUM_CREATED_TIME TIMESTAMP,
ALBUM_MODIFIED_TIME TIMESTAMP,
ALBUM_LINK VARCHAR (2000) ,
ALBUM_VISIBILITY VARCHAR (100) ,
COVER_PHOTO_ID VARCHAR (100),
constraint Visibility_status check ((ALBUM_VISIBILITY = 'everyone') or (ALBUM_VISIBILITY = 'friends')
    or ALBUM_VISIBILITY = 'myself' or ALBUM_VISIBILITY = 'friends_of_friends'),
PRIMARY KEY (ALBUM_ID)
);

CREATE TABLE PHOTOS
(PHOTO_ID VARCHAR (100) ,
ALBUM_ID VARCHAR (100) not null, 
PHOTO_CAPTION VARCHAR (2000) ,
PHOTO_CREATED_TIME TIMESTAMP,
PHOTO_MODIFIED_TIME TIMESTAMP,
PHOTO_LINK VARCHAR (2000) ,
PRIMARY KEY (PHOTO_ID)
);

alter table ALBUMS add constraint ALBUMSRefsPHOTOS foreign key (COVER_PHOTO_ID) references PHOTOS initially deferred deferrable;
alter table PHOTOS add constraint PHOTOSRefsALBUMS foreign key (ALBUM_ID) references ALBUMS initially deferred deferrable;



CREATE TABLE TAGS
(TAG_PHOTO_ID VARCHAR (100) REFERENCES PHOTOS(PHOTO_ID),
TAG_SUBJECT_ID NUMBER REFERENCES USERS(USER_ID),
TAG_CREATED_TIME TIMESTAMP,
TAG_X NUMBER,
TAG_Y NUMBER,
PRIMARY KEY (TAG_PHOTO_ID,TAG_SUBJECT_ID)
);




    CREATE TABLE USERS
         (
            USER_ID  NUMBER NOT NULL,
            FIRST_NAME  VARCHAR (100)  ,
            LAST_NAME  VARCHAR (100)  ,
            YEAR_OF_BIRTH  INTEGER ,
            MONTH_OF_BIRTH  INTEGER ,
            DAY_OF_BIRTH  INTEGER ,
            GENDER  VARCHAR (100) ,
            PRIMARY KEY (USER_ID)
        );

    CREATE TABLE FRIENDS
         (
            USER1_ID  NUMBER REFERENCES USERS(USER_ID) ,
            USER2_ID  NUMBER REFERENCES USERS(USER_ID),
            PRIMARY KEY (USER1_ID,USER2_ID) 
         );    

    CREATE TABLE CITIES
         (
            CITY_ID  INTEGER NOT NULL,
            CITY_NAME  VARCHAR (100)  ,
            STATE_NAME  VARCHAR (100)  ,
            COUNTRY_NAME  VARCHAR (100),
            PRIMARY KEY (CITY_ID)
         );    

    CREATE TABLE    USER_CURRENT_CITY
         (
            USER_ID  NUMBER REFERENCES USERS,
            CURRENT_CITY_ID  INTEGER REFERENCES CITIES,
            PRIMARY KEY (USER_ID,CURRENT_CITY_ID)
         );    

    CREATE TABLE USER_HOMETOWN_CITY
         (
            USER_ID  NUMBER REFERENCES USERS(USER_ID),
            HOMETOWN_CITY_ID  INTEGER REFERENCES CITIES(CITY_ID),
            PRIMARY KEY (USER_ID,HOMETOWN_CITY_ID)
         );    

    CREATE TABLE MESSAGE
         (
            SENDER_ID  NUMBER REFERENCES USERS(USER_ID),
            RECEIVER_ID  NUMBER REFERENCES USERS(USER_ID),
            MESSAGE_CONTENT  VARCHAR (2000),
            SENT_TIME  TIMESTAMP, 
            PRIMARY KEY(SENDER_ID,RECEIVER_ID)
         );    

    CREATE TABLE PROGRAMS
         (
            PROGRAM_ID  INTEGER ,
            INSTITUTION  VARCHAR (100)  ,
            CONCENTRATION  VARCHAR (100)  ,
            DEGREE  VARCHAR (100)  ,
            PRIMARY KEY (PROGRAM_ID)
         );    

    CREATE TABLE EDUCATION
         (
            USER_ID  NUMBER REFERENCES USERS(USER_ID),
            PROGRAM_ID  INTEGER REFERENCES PROGRAMS(PROGRAM_ID),
            PROGRAM_YEAR  INTEGER ,
            PRIMARY KEY (USER_ID, PROGRAM_ID)
          );   

    CREATE TABLE USER_EVENTS
         (
            EVENT_ID  NUMBER NOT NULL,
            EVENT_CREATOR_ID  NUMBER REFERENCES USERS(USER_ID),
            EVENT_NAME  VARCHAR (100),
            EVENT_TAGLINE  VARCHAR (100),
            EVENT_DESCRIPTION  VARCHAR (100),
            EVENT_HOST  VARCHAR (100),
            EVENT_TYPE  VARCHAR (100)  ,
            EVENT_SUBTYPE  VARCHAR (100)  ,
            EVENT_LOCATION  VARCHAR (100)  ,
            EVENT_CITY_ID  INTEGER,
            EVENT_START_TIME  TIMESTAMP ,
            EVENT_END_TIME  TIMESTAMP ,
            PRIMARY KEY (EVENT_ID)
         );               




    CREATE TABLE PARTICIPANTS
    (
    EVENT_ID NUMBER REFERENCES USER_EVENTS(EVENT_ID),
    USER_ID NUMBER REFERENCES USERS(USER_ID),
    CONFIRMATION VARCHAR(100),
    CONSTRAINT CONFIRMATION_STATUS CHECK ((CONFIRMATION = 'ATTENDING') OR (CONFIRMATION = 'DECLINED') 
        OR CONFIRMATION = 'UNSURE' OR CONFIRMATION = 'NOT-REPLIED'),
    PRIMARY KEY (EVENT_ID,USER_ID)
    );



    CREATE TABLE ALBUMS
    (ALBUM_ID VARCHAR (100) NOT NULL ,
    ALBUM_OWNER_ID NUMBER REFERENCES USERS(USER_ID),
    ALBUM_NAME VARCHAR (100) ,
    ALBUM_CREATED_TIME TIMESTAMP,
    ALBUM_MODIFIED_TIME TIMESTAMP,
    ALBUM_LINK VARCHAR (2000) ,
    ALBUM_VISIBILITY VARCHAR (100) ,
    COVER_PHOTO_ID VARCHAR (100) NOT NULL,
    CONSTRAINT VISIBILITY_STATUS CHECK ((ALBUM_VISIBILITY = 'EVERYONE') OR (ALBUM_VISIBILITY = 'FRIENDS')
        OR ALBUM_VISIBILITY = 'MYSELF' OR ALBUM_VISIBILITY = 'FRIENDS_OF_FRIENDS'),
    PRIMARY KEY (ALBUM_ID)
    );

    CREATE TABLE PHOTOS
    (PHOTO_ID VARCHAR (100)NOT NULL ,
    ALBUM_ID VARCHAR (100) NOT NULL, 
    PHOTO_CAPTION VARCHAR (2000) ,
    PHOTO_CREATED_TIME TIMESTAMP,
    PHOTO_MODIFIED_TIME TIMESTAMP,
    PHOTO_LINK VARCHAR (2000) ,
    PRIMARY KEY (PHOTO_ID)
    );

    ALTER TABLE ALBUMS ADD CONSTRAINT ALBUMSREFSPHOTOS FOREIGN KEY (COVER_PHOTO_ID) REFERENCES PHOTOS INITIALLY DEFERRED DEFERRABLE;
    ALTER TABLE PHOTOS ADD CONSTRAINT PHOTOSREFSALBUMS FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS INITIALLY DEFERRED DEFERRABLE;



    CREATE TABLE TAGS
    (TAG_PHOTO_ID VARCHAR (100) REFERENCES PHOTOS(PHOTO_ID),
    TAG_SUBJECT_ID NUMBER REFERENCES USERS(USER_ID),
    TAG_CREATED_TIME TIMESTAMP,
    TAG_X NUMBER,
    TAG_Y NUMBER,
    PRIMARY KEY (TAG_PHOTO_ID,TAG_SUBJECT_ID)
    );


